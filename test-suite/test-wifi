#!/usr/bin/env python
import argparse
import subprocess
import os
import time
import ConfigParser

config = ConfigParser.RawConfigParser()
config.read('test-suite.cfg')
dev = config.get('interface', 'dev')
ip = config.get('interface', 'ip')
essid = config.get('interface', 'essid')
dumpfile = config.get('iofiles', 'dumpfile')
clickfile = config.get('iofiles', 'clickfile')
series = config.getint('test', 'series')
sendsperseries = config.getint('test', 'sendsperseries')
firstorsecond = config.get('test', 'firstorsecond')
runname = config.get('test', 'runname')

parser = argparse.ArgumentParser(prog="dxwifi",
    description="DxWifi Test-Suite")

parser.add_argument("-n", "--networkmanager",
    action="store_true", required=False,
    help="Restarts network manager")

parser.add_argument("-f", "--file",
    action="store_true", required=False,
    help="Writes recieved packets to .pcap or .txt file")

parser.add_argument("-l", "--listen",
    action="store_true", required=False,
    help="Writes recieved packets to stdout")

parser.add_argument("-c", "--click", metavar="FILE.click", action="store",
    required=False, help="Specify a .click file to load")

parser.add_argument("-t", "--transmit",
    action="store_true", required=False,
    help="Installs .click file from .cfg")

parser.add_argument("-a", "--automate",
    action="store_true", required=False,
    help="Automates sending and recieving")

parser.add_argument("-s", "--stopclick",
    action="store_true", required=False,
    help="Uninstalls click")

args = vars(parser.parse_args())

def test_click():
    try:
        click = subprocess.check_output(["click", "--version"])
    except:
        exit("You must have click installed, or else.")

def test_root():
    if os.getuid() != 0:
        exit("You must have root privileges, or else.")

def set_internet():
    stopclick()
    subprocess.call(["start", "network-manager"])

def stopclick():
    subprocess.call(["click-uninstall"])

def card_down():
    stopclick()
    subprocess.call(["ifconfig", dev, "down"])
        
def card_up():
    stopclick()
    subprocess.call(["ifconfig", dev, "up"])
    
def click_config():
    card_down()
    subprocess.call(["stop", "network-manager"])

    try:
        subprocess.call(["iwconfig", dev, "mode",
            "ad-hoc", "essid", essid])
    except:
        exit()

    try:
        subprocess.call(["ifconfig", dev, ip])
    except:
        exit()

    time.sleep(10)

def delta_time(num_seconds, start_time):
    while(int(time.time()) - start_time < num_seconds):
        time.sleep(1)
    return

def auto():
    while(int(time.time()) % 10 != 0):
        time.sleep(1)
    start_time = int(time.time())

    try:
        os.mkdir("./" + runname)
    except:
        print "107 exception"

    print "109"

    for y in range(0, series):
        print "112"

        try:
            os.mkdir("./" + runname + "/" + firstorsecond + "_series" + str(y))
        except:
            print "117 exception"
 
        series_dir = "./" + runname + "/" + firstorsecond + "_series" + str(y) + "/"
        for x in range(0, sendsperseries):
            if(firstorsecond == "first"):
                if(x == 0):
                    click_config()
                    transmit()
                delta_time((30 + (15 * y)) + 2, start_time)
                transmit()

            if(firstorsecond == "second"):
                if(x == 0):
                    listen_config()
                tcpdmp = subprocess.Popen(["tcpdump", "-ennvvvKXXSi", dev,
                "port 12121", "-w", series_dir + "test" + str(x) + ".pcap"])
                delta_time(30 + (15 * y), start_time)
                subprocess.Popen.kill(tcpdmp)

        for x in range(0, sendsperseries):
            if(firstorsecond == "second"):
                if(x == 0):
                    click_config()
                    transmit()
                delta_time((30 + (15 * y)) + 2, start_time)
                transmit()

            if(firstorsecond == "first"):
                if(x == 0):
                    listen_config()
                tcpdmp = subprocess.Popen(["tcpdump", "-ennvvvKXXSi", dev,
                "port 12121", "-w", series_dir + "test" + str(x) + ".pcap"])
                delta_time(30 + (15 * y), start_time)
                subprocess.Popen.kill(tcpdmp)


def set_click():
    stopclick()
    subprocess.call(["click-install", args["click"]])

def transmit():
    stopclick()
    subprocess.call(["click-install", clickfile])

def listen_config():
    stopclick()
    subprocess.call(["stop", "network-manager"])
    card_down()
    subprocess.call(["iwconfig", dev, "mode", "monitor"])
    card_up()
    subprocess.call(["iwconfig", dev, "channel", "2.412"])
    
def set_listen():
    stopclick()

    tcpdmp = subprocess.Popen(["tcpdump", "-enntKXXSi", dev,
    "port", "12121"])


def infile():
    stopclick()

    if dumpfile.endswith(".pcap"):
        subprocess.call(["tcpdump", "-ennvvvKXXSi", dev, 
        "port", "12121", "-w", "./" + dumpfile])
    elif dumpfile.endswith(".txt"):
        subprocess.call(["tcpdump", "-ennvvvKXXSi", dev,
        "port", "12121", ">", "./" + dumpfile])

if __name__ == "__main__":
    test_click()
    test_root()

    if args["stopclick"]:
        stopclick()

    elif args["networkmanager"]:
        set_internet()

    elif args["listen"]:
        listen_config()
        set_listen()

    elif args["file"]:
        listen_config()
        infile()

    elif args["transmit"]:
        click_config()
        transmit()

    elif args.get("automate"):
        auto()

    elif args.get("click") is not None:
        click_config()
        set_click()
    
    else:
        print "Please specify a valid argument, see --help"

