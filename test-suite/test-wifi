#!/usr/bin/env python
import argparse
import subprocess
import os
import time

parser = argparse.ArgumentParser(prog="dxwifi",
    description="DxWifi Test-Suite")

parser.add_argument("-n", "--restartnetworkmanager",
    action="store_true", required=False,
    help="Restarts network manager")

parser.add_argument("-l", "--listen", metavar="OUTPUT", action="store", nargs="?",
    required=False, help="Writes to .pcap file, .txt, or no arg for stdout")

parser.add_argument("-c", "--click", metavar="FILE.click", action="store",
    required=False, help="Specify a .click file to load")

parser.add_argument("-f", "--interface", metavar="INTERFACE", action="store",
    required=False, help="Network interface")

parser.add_argument("-i", "--ip", metavar="IP", action="store",
    required=False, help="IP to assume while transmitting")

parser.add_argument("-e", "--essid", metavar="ESSID", action="store",
    required=False, help="ESSID to assume while transmitting")

parser.add_argument("-a", "--automate",
    action="store_true", required=False,
    help="Automates sending and recieving")

parser.add_argument("-s", "--stopclick",
    action="store_true", required=False,
    help="Uninstalls click")

parser.add_argument("--first",
    action="store_true", required=False,
    help="This station transmits first")

parser.add_argument("--second",
    action="store_true", required=False,
    help="This station tranmits second")

args = vars(parser.parse_args())

def test_click():
    try:
        click = subprocess.check_output(["click", "--version"])
    except:
        exit("You must have click installed, or else.")

def test_root():
    if os.getuid() != 0:
        exit("You must have root privileges, or else.")

def set_internet():
    subprocess.call(["bash", "set_internet.sh"])

def stopclick():
    subprocess.call(["click-uninstall"])

def card_down():
    stopclick()
    subprocess.call(["ifconfig", args["interface"], "down"])
        
def card_up():
    stopclick()
    subprocess.call(["ifconfig", args["interface"], "up"])
    
def click_config():
    card_down()

    try:
        subprocess.call(["iwconfig", args["interface"], "mode",
            "ad-hoc", "essid", args["essid"])
    except:
        exit()

    if "." in args["ip"]:
        ip = args["ip"]
    else:
        ip = "192.168.0." + args["ip"]
    try:
        subprocess.call(["ifconfig", args["interface"], ip)
    except:
        exit()

    time.sleep(10)

def set_click():
    stopclick()
    subprocess.call(["click-install", args["click"])

def listen_config():
    card_down()
    subprocess.call(["iwconfig", args["interface"] "mode", "monitor"])
    card_up()
    subprocess.call(["iwconfig", args["interface"] "channel", "2.412"])
    
def set_listen():
    stopclick()
    dumpfile = args.get("listen")

    if dumpfile is not None:
        if dumpfile.endswith(".pcap"):
            subprocess.call(["tcpdump", "-ennvvvKXXSi", args["interface"],
            "port", "12121", "-w", "./" + dumpfile])
        elif dumpfile.endswith(".txt"):
            subprocess.call(["tcpdump", "-ennvvvKXXSi", args["interface"],
            "port", "12121", ">", "./" + dumpfile])
    else:
        subprocess.call(["tcpdump", "-enntKXXSi", args["interface"],
        "port", "12121"])

if __name__ == "__main__":
    test_click()
    test_root()
    if args.get("click") is not None:
        if args.get("interface") is not None and
            args.get("ip") is not None and
            args.get("essid") is not None:
            click_config()
            set_click()
        elif args.get("interface") is None and
            args.get("ip") is None and
            args.get("essid") is None:
            set_click()
        else:
            exit("You dun goofed. -i, -e, -f are all or nothing.")

    elif args.get("listen") is not None:
        if args.get("interface") is not None:
            listen_config() 
            set_listen()
        else:
            set_listen()


